#ifndef __SHADER_H__
#define __SHADER_H__

#include "Graphics.h"
#include <iostream>
#include <cstdlib>


/// @enum Type of shader this object is
enum SHADERTYPE{VERTEX,FRAGMENT,GEOMETRY,TESSELATION};
/// @class Shader
/// @brief and encapsulation of an OpenGL Shader object with
/// associations for source code, etc.
/// Used in conjunction with the ShaderProgram class
/// @author Jonathan Macey
/// @version 1.0
/// @date 24/11/10
//----------------------------------------------------------------------------------------------------------------------

class Shader
{
public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor
    /// @param _name the name of the program object
    /// @param[in] _type the type of shader we are building
    //----------------------------------------------------------------------------------------------------------------------
    Shader(
        std::string _name,
        SHADERTYPE _type
        );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor, will clean up shader source and remove shader from GL
    //----------------------------------------------------------------------------------------------------------------------
    ~Shader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief compile the current shader will check to see if source
    /// is attached and issue warning if not
    //----------------------------------------------------------------------------------------------------------------------
    void compile();
    /// @brief load in shader source and attach it to the shader object
    /// if source is already loaded it will re-load and re-attached
    /// @param _name the file name for the source we are loading
    //----------------------------------------------------------------------------------------------------------------------
    void load(
        std::string _name
        );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle the debug state
    //----------------------------------------------------------------------------------------------------------------------
    void toggleDebug(){m_debugState ^=true;};
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the shader handle for this shader
    /// @return the hand for this shader
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getShaderHandle()const {return m_shaderHandle;};
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief increment the shader ref count so we can see how many
    /// program objects are using this shader
    //----------------------------------------------------------------------------------------------------------------------
    inline void incrementRefCount(){ ++m_refCount;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief decrement the reference counteer
    //----------------------------------------------------------------------------------------------------------------------
    inline void decrementRefCount(){ --m_refCount;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief return the number of ProgramObjects referencing this shader
    /// @returns the number of references
    //----------------------------------------------------------------------------------------------------------------------
    inline int getRefCount()const { return m_refCount; }

private :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the text name of this Shader used in the search for shader
    //----------------------------------------------------------------------------------------------------------------------
    std::string m_name;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the actual source code for this shader (used for debug and initial loading)
    //----------------------------------------------------------------------------------------------------------------------
    std::string *m_source;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the shader has been compiled
    /// this will get channged on re-load of source to false
    //----------------------------------------------------------------------------------------------------------------------
    bool m_compiled;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief what type of shader we are
    //----------------------------------------------------------------------------------------------------------------------
    SHADERTYPE m_shaderType;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the GL handle for this shader object used in linking etc
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_shaderHandle;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate the debug state
    //----------------------------------------------------------------------------------------------------------------------
    bool m_debugState;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief number of ProgramObjects referencing this shader
    //----------------------------------------------------------------------------------------------------------------------
    int m_refCount;
};

#endif
